// IE9+: Object.keys(), Array.forEach(), Array.indexOf(), JSON

// –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: jquery.ui.sortable; minicolors

(function($) {

    // {a: {b: 1}} ‚Üí {'a.b': 1}
    function flatten(object) {
        return Object.keys(object).reduce(function(result, key) {
            if ((typeof object[key]) === 'object' && object[key]) {
                var flat_object = flatten(object[key]);
                Object.keys(flat_object).forEach(function(key2) {
                    result[key + '.' + key2] = flat_object[key2];
                });
            } else {
                result[key] = object[key];
            }
            return result;
        }, {});
    }

    // {'a.b': 1} ‚Üí {a: {b: 1}}
    function unflatten(object) {
        var result = {};
        for (var flat_key in object) {
            set_multilevel_object_value(result, flat_key.split('.'), object[flat_key]);
        }
        return result;
    }

    function set_multilevel_object_value(target, keys, end_value) {
        var recipient = target,
            last_index = keys.length - 1;
        for (var i = 0; i < last_index; i++) {
            if (recipient[keys[i]] === undefined) {
                recipient[keys[i]] = {};
            }
            recipient = recipient[keys[i]];
        }
        recipient[keys[last_index]] = end_value;
        return target;
    }

    function replace_from_to(string, from, to) {
        return string.replace('%from', from).replace('%to', to);
    }

    var font_select_options_cache = '';

    /**
     * Constructor
     */
    var nc_mixin_settings_editor = window.nc_mixin_settings_editor = function(options) {
        if (!(this instanceof nc_mixin_settings_editor)) {
            return new nc_mixin_settings_editor(options);
        }

        for (var setting in options) {
            if (setting in this) {
                this[setting] = options[setting];
            }
        }

        this.scope = this.scope || this.field_name_prefix || 'Index';

        var target_container = $(this.target);
        target_container.html($('.nc-mixins-editor-template').html());
        this.container = target_container.find('.nc-mixins-editor');

        this.lang = this.container.data('lang');
        this.set_field_names();

        this.init_breakpoint_type_container(); // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–ª–∏ –ø—Ä—è—á–µ–º –±–ª–æ–∫ —Å –≤—ã–±–æ—Ä–æ–º —Ç–∏–ø–∞ –±—Ä–µ–π–∫–ø–æ–∏–Ω—Ç–æ–≤
        this.find('.nc-mixins-breakpoint-type-select').val(this.breakpoint_type);
        this.breakpoints = {};
        this.breakpoints[this.MAX_WIDTH] = this.MAX_WIDTH.toString();

        // –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ –≥—Ä—É–ø–ø –º–∏–∫—Å–∏–Ω–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        this.mixin_type_order = this.get_mixin_type_order();

        // —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º/–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∏–∫—Å–∏–Ω–æ–≤ –∏–∑ options.own_settings
        this.set_own_settings(this.own_settings);

        this.init_preset_container(); // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–ª–∏ –ø—Ä—è—á–µ–º –±–ª–æ–∫ —Å –≤—ã–±–æ—Ä–æ–º –ø—Ä–µ—Å–µ—Ç–∞
        this.apply_preset_settings(); // –ø—Ä–∏–º–µ–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–µ—Å–µ—Ç

        this.rebuild_table();
        this.init_event_handlers();

        // –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ —Å–≤–æ–π—Å—Ç–≤ –¥–ª—è —á–µ—Ç—ã—Ä—ë—Ö —Å—Ç–æ—Ä–æ–Ω —Å üîí
        var editor = this;
        this.find('.nc-mixins-mixin-settings-lock-sides-button').each(function() {
            editor.init_lock_sides_button($(this));
        });

        // –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ–ª–µ–∫—Ç–æ–≤ –≤—ã–±–æ—Ä–∞ —à—Ä–∏—Ñ—Ç–æ–≤
        this.load_fonts();
        this.find('select.nc-mixins-mixin-font-select').each(function() {
            editor.init_font_select($(this));
        });

        // –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª–µ–π –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞
        this.init_color_inputs(this.find('[data-color-input]'));

        // –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ —Ñ–∞–π–ª–æ–≤
        this.init_uploader(this.find('[data-uploader]'));

        this.is_initialized = true;
        this.update_mixin_json(); // –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –∏–Ω–ø—É—Ç –ø—É—Å—Ç–æ–π, –∏ –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è, –ø–æ–∫–∞ is_initialized = false
    };

    // "Static" properties:
    /** –°–æ–±—ã—Ç–∏–µ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–æ—Ä–º—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –º–∏–∫—Å–∏–Ω–∞ (—É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏–π) */
    nc_mixin_settings_editor.mixin_settings_set_values_event = 'mixin_settings_set_values_event';
    /** –°–æ–±—ã—Ç–∏–µ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –ø—É—Å—Ç–æ–π –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∏–∫—Å–∏–Ω–∞ (—Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–∞ ¬´–¥–æ–±–∞–≤–∏—Ç—å¬ª) */
    nc_mixin_settings_editor.mixin_settings_new_row_event = 'mixin_settings_new_row_event';
    /** –°–æ–±—ã—Ç–∏–µ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∏–ø–∞ –±—Ä–µ–π–∫–ø–æ–∏–Ω—Ç–æ–≤ (—Ç–∞–∫–∂–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ **/
    nc_mixin_settings_editor.breakpoint_type_change_event = 'breakpoint_type_change';

    // Instance properties & methods:
    nc_mixin_settings_editor.prototype = {
        // –±—Ä–µ–π–∫–ø–æ–∏–Ω—Ç ¬´–ª—é–±–∞—è —à–∏—Ä–∏–Ω–∞¬ª
        MAX_WIDTH: 9999,

        is_initialized: false,

        // –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å–Ω–∞—Ä—É–∂–∏ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫, –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã—Ö –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä:
        target: '#nc_mixins_editor_container',
        field_name_template: 'data[%s]',
        field_name_prefix: '',
        scope: null, // —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å field_name_prefix –∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –æ—Å–æ–±—ã—Ö —Å–ª—É—á–∞–µ–≤ (field_name_prefix = 'MainArea')
        mixin_presets: [],
        own_settings: {},
        breakpoint_type: 'block',
        component_template_id: undefined, // ID —à–∞–±–ª–æ–Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∏–ª–∏ ID –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç –¥–∏–∞–ª–æ–≥
        infoblock_id: undefined,
        show_preset_select: false,
        show_breakpoint_type_select: false,

        // –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å–Ω–∞—Ä—É–∂–∏ –∏–∑ data-–∞—Ç—Ä–∏–±—É—Ç–æ–≤
        lang: {},
        fonts: [],

        // –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –∏–º–µ—é—â–∏—Ö—Å—è –¥–∞–Ω–Ω—ã—Ö:
        container: null,
        selectors: {}, // Set –±—ã –ø–æ–¥–æ—à—ë–ª –ª—É—á—à–µ, –Ω–æ –æ–Ω –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –≤ IE11+
        breakpoints: {},
        inherited_settings: {},
        temporary_own_settings: {},
        mixin_type_order: [],
        calculated_colors: {},

        constructor: nc_mixin_settings_editor,

        /**
         * –ù–∞—Ö–æ–¥–∏—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –≤–Ω—É—Ç—Ä–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
         * @param selector
         * @return {*}
         */
        find: function(selector) {
            return this.container.find(selector);
        },

        /**
         * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
         */
        init_event_handlers: function() {
            var editor = this;

            // –≤—ã–±–æ—Ä –ø—Ä–µ—Å–µ—Ç–∞
            this.find('.nc-mixins-preset-select').change($.proxy(this, 'on_preset_select_change'));

            // —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞
            this.find('.nc-mixins-preset-actions .nc--edit').click($.proxy(this, 'open_preset_edit_dialog'));

            // —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞
            this.find('.nc-mixins-preset-actions .nc--remove').click($.proxy(this, 'open_preset_delete_dialog'));

            // –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–∞ –±—Ä–µ–π–∫–ø–æ–∏–Ω—Ç–æ–≤
            this.find('.nc-mixins-breakpoint-type-select').change($.proxy(this, 'on_breakpoint_type_select_change')).change();

            // –≤—ã–±–æ—Ä —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
            this.find('.nc-mixins-selector-select').change($.proxy(this, 'on_selector_select_change'));

            // –∑–∞–≥–æ–ª–æ–≤–æ–∫ —è—á–µ–µ–∫ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤:
            // ‚Äî –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±—Ä–µ–π–∫–ø–æ–∏–Ω—Ç–∞
            this.container.on('click', '.nc-mixins-breakpoint-add-button', $.proxy(this, 'show_new_breakpoint_dialog'));

            // ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±—Ä–µ–π–∫–ø–æ–∏–Ω—Ç–∞
            this.container.on('click', '.nc-mixins-breakpoint', $.proxy(this, 'show_edit_breakpoint_dialog'));

            // —è—á–µ–π–∫–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤:
            // ‚Äî –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            // ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            this.container.on('click', '.nc-mixins-add-setting, .nc-mixins-settings-marker', $.proxy(this, 'show_mixin_settings'));

            // —â–µ–ª—á–æ–∫ –Ω–∞ –Ω–µ—Ä–∞—Å–∫—Ä—ã—Ç—É—é —è—á–µ–π–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
            this.container.on('click', '.nc-mixins-settings-cell:not(.nc--active)', function() {
                var last_width_cell = $(this).prev(),
                    settings_marker = last_width_cell.find('.nc-mixins-settings-marker');
                if (settings_marker.length) {
                    settings_marker.click();
                } else {
                    last_width_cell.find('.nc-mixins-add-setting').click();
                }
            });

            // –≤—ã–±–æ—Ä –º–∏–∫—Å–∏–Ω–∞
            this.container.on('change', '.nc-mixins-mixin-select', function() {
                editor.on_mixin_select_change($(this), false);
            });

            // –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–∏–∫—Å–∏–Ω–∞
            // (—Ç–∞–∫–∂–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–∞—Å–∫–∞–¥–æ–º –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞)
            this.container.on('change input', '.nc-mixins-mixin-settings :input', $.proxy(this, 'update_current_mixin_settings'));

            // —É–¥–∞–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            this.container.on('click', '.nc-mixins-mixin-remove', $.proxy(this, 'on_remove_settings_button_click'));

            // –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–∏–∫—Å–∏–Ω–∞
            this.container.on('click', '.nc-mixins-mixin-settings-row-add', $.proxy(this, 'on_mixin_multiple_settings_add_button_click'));

            // —É–¥–∞–ª–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–∏–∫—Å–∏–Ω–∞
            this.container.on('click', '.nc-mixins-mixin-settings-row-remove', $.proxy(this, 'on_mixin_multiple_settings_remove_button_click'));
        },

        /**
         * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è input'–∞, –∏—Å—Ö–æ–¥—è –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ field_name_template –∏ field_name_prefix
         * @param {string} field_name
         * @returns {string}
         */
        get_field_name(field_name) {
            return this.field_name_template.replace('%s', (this.field_name_prefix ? this.field_name_prefix + '_' : '') + field_name);
        },

        /**
         * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞—Ç—Ä–∏–±—É—Ç name input‚Äô–æ–≤ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å field_name_template –∏ field_name_prefix
         */
        set_field_names: function() {
            var fields = {
                '.nc-mixins-json': 'Mixin_Settings',
                '.nc-mixins-preset-select': 'Mixin_Preset_ID',
                '.nc-mixins-breakpoint-type-select' : 'Mixin_BreakpointType'
            };
            for (var selector in fields) {
                this.find(selector).attr('name', this.get_field_name(fields[selector]));
            }
        },

        /**
         * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª–µ–π –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
         * (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ —Ñ–æ—Ä–º—ã –≤ own_settings –∏ –¥–∞–ª–µ–µ
         * –≤ —Å–∫—Ä—ã—Ç–æ–µ –ø–æ–ª–µ —Å–æ –≤—Å–µ–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –≤ JSON)
         * @param container
         * @returns {{}}
         */
        get_mixin_input_values: function(container) {
            var values = {};
            container.find('input, select, textarea').filter('[name^="mixin."]').each(function() {
                var input = $(this),
                    name_without_prefix = this.name.replace(/^mixin\./, ''),
                    value = input.val();

                if (input.is(':radio') && !input.is(':checked')) {
                    return;
                }

                // –î–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –±–ª–æ–∫–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–ª–æ—ë–≤ —Ñ–æ–Ω–∞ –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–æ–ª–æ–Ω–æ–∫)
                // –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:
                // div.nc-mixins-mixin-settings-rows > div.nc-mixins-mixin-settings-row
                // '#' –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ input‚Äô–æ–≤ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ ...-row.
                if (name_without_prefix.indexOf('#') >= 0) {
                    // (–∞) –ø—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –∏–Ω–ø—É—Ç –≤ div.nc-mixins-mixin-settings-row-template
                    if (input.closest('.nc-mixins-mixin-settings-row-template').length) {
                        return;
                    }
                    // (–±) –∑–∞–º–µ–Ω—è–µ–º '#' –Ω–∞ –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏
                    var row = input.closest('.nc-mixins-mixin-settings-row'),
                        index = row.parent().children().index(row);
                    if (index >= 0) {
                        name_without_prefix = name_without_prefix.replace(/#/g, index);
                    }
                }
                if (input.is(':checkbox')) {
                    values[name_without_prefix] = input.is(':checked') ? value : '';
                } else if (input.is('[data-color-input][data-nc-swatches][data-sync-color^="var"]')) {
                    values[name_without_prefix] = input.attr('data-sync-color');
                } else {
                    values[name_without_prefix] = value;
                }
            });
            return values;
        },

        /**
         * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —É–Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç –ø—Ä–µ—Å–µ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
         * @param inherited_settings
         */
        set_inherited_settings: function(inherited_settings) {
            var had_preset = !$.isEmptyObject(this.inherited_settings),
                has_new_preset = !$.isEmptyObject(inherited_settings);

            if (has_new_preset) {
                // —É–¥–∞–ª—è–µ–º –±—Ä–µ–π–∫–ø–æ–∏–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –ø—Ä–µ—Å–µ—Ç–µ
                var existing_breakpoints = Object.keys(this.breakpoints),
                    inherited_breakpoints = this.get_breakpoints_as_array_from_settings(inherited_settings),
                    breakpoints_to_delete = existing_breakpoints.filter(function(value) {
                        return inherited_breakpoints.indexOf(value) < 0;
                    });
                if (breakpoints_to_delete.length) {
                    // @todo –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—Ç—å, —á—Ç–æ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (—É–¥–∞–ª–µ–Ω—ã –±—Ä–µ–π–∫–ø–æ–∏–Ω—Ç—ã)
                    // @todo (–Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ, —Å–¥–µ–ª–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è?)
                    for (var i = 0; i < breakpoints_to_delete.length; i++) {
                        this.remove_breakpoint(breakpoints_to_delete[i]);
                    }
                    this.after_breakpoint_change();
                }
            } else if (had_preset) {
                // –µ—Å–ª–∏ –±—ã–ª –≤—ã–±—Ä–∞–Ω –ø—Ä–µ—Å–µ—Ç, –Ω–æ –ø–æ—Ç–æ–º –æ–Ω ¬´–æ—Ç–≤—è–∑–∞–Ω¬ª, —Ç–æ –∫–æ–ø–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–µ—Å–µ—Ç–∞ –≤ –±–ª–æ–∫
                // @todo? —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å, –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—å –ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                this.set_own_settings($.extend({}, this.inherited_settings, this.own_settings));
            }

            // –≤–∫–ª—é—á–∞–µ–º –∏–ª–∏ –æ—Ç–∫–ª—é—á–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±—Ä–µ–π–∫–ø–æ–∏–Ω—Ç–æ–≤:
            this.container.toggleClass('nc-mixins-editor--with-preset', has_new_preset);

            this.inherited_settings = inherited_settings;
            this.extract_selectors_and_breakpoints(inherited_settings);
        },

        /**
         * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ (–Ω–µ—É–Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–Ω—ã–µ) –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
         * @param own_settings
         */
        set_own_settings: function(own_settings) {
            this.own_settings = own_settings;
            this.extract_selectors_and_breakpoints(own_settings);
        },

        /**
         * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—Ä–µ–π–∫–ø–æ–∏–Ω—Ç—ã –∏ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
         * @param settings
         */
        extract_selectors_and_breakpoints: function(settings) {
            for (var selector in settings) {
                this.selectors[selector] = selector;
                for (var mixin_type in settings[selector]) {
                    for (var breakpoint in settings[selector][mixin_type]) {
                        this.breakpoints[breakpoint] = breakpoint; // –∏–º—è —Å–≤–æ–π—Å—Ç–≤–∞ –æ–±—ä–µ–∫—Ç–∞ ‚Äî –≤—Å–µ–≥–¥–∞ —Å—Ç—Ä–æ–∫–∞
                    }
                }
            }
            this.sort_breakpoints();
            this.on_breakpoint_number_change();
            this.update_selectors_select();
        },

        /**
         * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Å –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–º–∏ –±—Ä–µ–π–∫–ø–æ–∏–Ω—Ç–∞–º–∏
         * @param settings
         * @returns {string[]}
         */
        get_breakpoints_as_array_from_settings: function(settings) {
            var breakpoints = {};
            for (var selector in settings) {
                for (var mixin_type in settings[selector]) {
                    for (var breakpoint in settings[selector][mixin_type]) {
                        breakpoints[breakpoint] = breakpoint; // –∏–º—è —Å–≤–æ–π—Å—Ç–≤–∞ –æ–±—ä–µ–∫—Ç–∞ ‚Äî –≤—Å–µ–≥–¥–∞ —Å—Ç—Ä–æ–∫–∞
                    }
                }
            }
            return Object.keys(breakpoints);
        },

        /**
         * –°–æ—Ä—Ç–∏—Ä—É–µ—Ç this.breakpoints –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é (–ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –Ω—ë–º)
         */
        sort_breakpoints: function() {
            // subtraction automatically casts strings to numbers
            var breakpoints_array = Object.keys(this.breakpoints).sort(function(a, b) { return a - b; });
            this.breakpoints = {};
            for (var i = 0; i < breakpoints_array.length; i++) {
                var b = breakpoints_array[i];
                this.breakpoints[b] = b;
            }
        },

        /**
         * –°–æ—Ä—Ç–∏—Ä—É–µ—Ç –≥—Ä—É–ø–ø—ã –º–∏–∫—Å–∏–Ω–æ–≤ –ø–æ –∏—Ö –ø–æ—Ä—è–¥–∫—É (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º)
         * @param group_settings
         */
        sort_mixins: function(group_settings) {
            var sorted = {};
            $.each(this.mixin_type_order, function(index, mixin_type) {
                if (mixin_type in group_settings) {
                    sorted[mixin_type] = group_settings[mixin_type];
                }
            });
            return sorted;
        },

        /**
         * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Ä—è–¥–æ–∫ –≥—Ä—É–ø–ø –º–∏–∫—Å–∏–Ω–æ–≤
         */
        get_mixin_type_order: function() {
            var mixin_type_order = [];
            this.find('.nc-mixins-mixin-row').each(function() {
                mixin_type_order.push($(this).data('mixinType'));
            });
            return mixin_type_order;
        },

        /**
         * –ü—Ä—è—á–µ—Ç/—É–±–∏—Ä–∞–µ—Ç –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±—Ä–µ–π–∫–ø–æ–∏–Ω—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ,
         * —Å–∫–æ–ª—å–∫–æ –±—Ä–µ–π–∫–ø–æ–∏–Ω—Ç–æ–≤ —É–∂–µ –∑–∞–¥–∞–Ω–æ
         */
        on_breakpoint_number_change: function() {
            // –∞—Ç—Ä–∏–±—É—Ç data-breakpoint-number —É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ ‚Äî –ø—Ä—è—á–µ—Ç –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (—Å—Ç–∏–ª—è–º–∏)
            // –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ (–∑–∞–¥–∞—ë—Ç—Å—è –≤ —Å—Ç–∏–ª—è—Ö)
            this.container.attr('data-breakpoint-number', Object.keys(this.breakpoints).length);
        },

        /**
         * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±—Ä–µ–π–∫–ø–æ–∏–Ω—Ç–∞
         * @param event
         */
        show_new_breakpoint_dialog: function(event) {
            var add_button = $(event.target),
                cell = add_button.closest('td'),
                max = parseInt(cell.data('breakpoint'), 10),
                min = parseInt(cell.prev().data('breakpoint'), 10) || 0,
                lang = this.lang;

            // @todo proper dialog
            var message = lang.BREAKPOINT_ADD_PROMPT;
            if (min || max) {
                message += ' ' + replace_from_to(lang.BREAKPOINT_ADD_PROMPT_RANGE, min, max);
            }
            message += ':';
            var new_breakpoint = parseInt(prompt(message), 10);
            if (new_breakpoint && new_breakpoint > min && new_breakpoint < max) {
                this.add_new_breakpoint(new_breakpoint);
            }
        },

        /**
         * –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –±—Ä–µ–π–∫–ø–æ–∏–Ω—Ç
         * @param new_breakpoint
         */
        add_new_breakpoint: function(new_breakpoint) {
            this.breakpoints[new_breakpoint] = new_breakpoint;
            this.sort_breakpoints();
            this.on_breakpoint_number_change();
            this.rebuild_table();
        },

        /**
         * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±—Ä–µ–π–∫–ø–æ–∏–Ω—Ç–∞
         * @param event
         */
        show_edit_breakpoint_dialog: function(event) {
            if (this.container.is('.nc-mixins-editor--with-preset')) {
                // –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –ø—Ä–µ—Å–µ—Ç, –Ω–µ –¥–∞—ë–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –±—Ä–µ–π–∫–ø–æ–∏–Ω—Ç—ã
                return;
            }

            var old_breakpoint = $(event.target).closest('.nc-mixins-width').data('breakpoint');

            // @todo proper dialog and constraints
            var message = this.lang.BREAKPOINT_CHANGE_PROMPT;
            var new_breakpoint = prompt(message, old_breakpoint);
            if (new_breakpoint == old_breakpoint || new_breakpoint === null) {
                return;
            }
            if (new_breakpoint === '' || new_breakpoint === '0') {
                this.remove_breakpoint(old_breakpoint);
            } else {
                this.replace_breakpoint(old_breakpoint, new_breakpoint);
            }
            this.after_breakpoint_change();
        },

        /**
         * –ó–∞–º–µ–Ω—è–µ—Ç –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∑–Ω–∞—á–µ–Ω–∏–µ –±—Ä–µ–π–∫–ø–æ–∏–Ω—Ç–∞ –ø–æ—Å–ª–µ –µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
         * @param old_breakpoint
         * @param new_breakpoint
         */
        replace_breakpoint: function(old_breakpoint, new_breakpoint) {
            var settings = this.own_settings;
            for (var selector in settings) {
                for (var mixin_type in settings[selector]) {
                    if (settings[selector][mixin_type][old_breakpoint]) {
                        settings[selector][mixin_type][new_breakpoint] = settings[selector][mixin_type][old_breakpoint];
                    }
                }
            }
            this.breakpoints[new_breakpoint] = new_breakpoint;

            this.remove_breakpoint(old_breakpoint);
        },

        /**
         * –£–¥–∞–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –±—Ä–µ–π–∫–ø–æ–∏–Ω—Ç–∞
         * @param breakpoint
         */
        remove_breakpoint: function(breakpoint) {
            var selector = this.get_current_selector();
            for (var mixin_type in this.own_settings[selector]) {
                delete this.own_settings[selector][mixin_type][breakpoint];
            }
            delete this.breakpoints[breakpoint];
        },

        /**
         * –û–±–Ω–æ–≤–ª—è–µ—Ç —Ä–µ–¥–∞–∫—Ç–æ—Ä –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è –±—Ä–µ–π–∫–ø–æ–∏–Ω—Ç–æ–≤
         */
        after_breakpoint_change: function() {
            this.temporary_own_settings = {};
            this.close_opened_mixin_settings();
            this.sort_breakpoints();
            this.on_breakpoint_number_change();
            this.rebuild_table();
            this.update_mixin_json();
        },

        /**
         * –û–±–Ω–æ–≤–ª—è–µ—Ç select —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏
         * @param current_selector
         */
        update_selectors_select: function(current_selector) {
            var select = this.find('.nc-mixins-selector-select'),
                last_option = select.find('option:last'),
                selectors_array = Object.keys(this.selectors).sort();
            if (current_selector === undefined) {
                current_selector = select.val();
            }
            select.find('.nc-mixins-selector-select-selector').remove();
            for (var i = 0; i < selectors_array.length; i++) {
                var selector = selectors_array[i];
                if (selector) {
                    $('<option>', {
                        value: selector,
                        text: selector,
                        'class': 'nc-mixins-selector-select-selector'
                    }).insertBefore(last_option);
                }
            }
            select.val(current_selector in this.selectors ? current_selector : '');
        },

        /**
         * –ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Å –º–∏–∫—Å–∏–Ω–∞–º–∏
         */
        rebuild_table: function() {
            var breakpoints = Object.keys(this.breakpoints).map(Number);
            this.temporary_own_settings = {};
            this.rebuild_table_head_width_ranges(breakpoints);
            this.rebuild_table_body_width_ranges(breakpoints);
        },

        /**
         * –ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã —Å –º–∏–∫—Å–∏–Ω–∞–º–∏
         */
        rebuild_table_head_width_ranges: function(breakpoints) {
            var num_ranges = breakpoints.length,
                cells = '';

            this.find('.nc-mixins-width-icon').prop('colspan', num_ranges);
            this.find('.nc-mixins-width').remove();

            for (var i = 0; i < num_ranges; i++) {
                var breakpoint = breakpoints[i];
                cells +=
                    '<td class="nc-mixins-width nc-mixins-width-head" data-breakpoint="' + breakpoint + '">' +
                    '<div class="nc-mixins-breakpoint-add-button-container">' +
                    '<div class="nc-mixins-breakpoint-add-button" title="' + this.lang.BREAKPOINT_ADD + '">+</div>' +
                    '</div>' +
                    '<div class="nc-mixins-breakpoint"><span>' +
                    (breakpoint >= this.MAX_WIDTH ? '&#x2731;' : breakpoint) + // ‚ú±
                    '</span></div>' +
                    '</td>';
            }

            cells = $(cells);
            cells.first().addClass('nc-mixins-width--first');
            cells.last().addClass('nc-mixins-width--last');

            this.find('.nc-mixins-width-ranges').prepend(cells)
        },

        /**
         * –ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ç–µ–ª–æ —Ç–∞–±–ª–∏—Ü—ã —Å –º–∏–∫—Å–∏–Ω–∞–º–∏
         */
        rebuild_table_body_width_ranges: function(breakpoints) {
            var editor = this;

            this.find('.nc-mixins-mixin-row').each(function() {
                var row = $(this),
                    cells = '',
                    prev_breakpoint = 0,
                    num_ranges = breakpoints.length;

                row.find('.nc-mixins-width').remove();

                for (var i = 0; i < num_ranges; i++) {
                    var breakpoint = breakpoints[i];
                    cells +=
                        '<td class="nc-mixins-width" data-breakpoint="' + breakpoint + '">' +
                        '<div class="nc-mixins-add-setting-container"><div class="nc-mixins-add-setting">+</div></div>' +
                        '</td>';
                    prev_breakpoint = breakpoint;
                }

                cells = $(cells);
                cells.first().addClass('nc-mixins-width--first');
                cells.last().addClass('nc-mixins-width--last');

                row.prepend(cells);

                editor.update_row_markers(row);

                // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –≤ data-mixin-scopes –Ω–µ—Ç scope —ç—Ç–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
                var mixin_scopes = row.data('mixin-scopes') || [];
                row.toggle(mixin_scopes.indexOf(editor.scope) !== -1);
            });
        },

        /**
         * –û–±–Ω–æ–≤–ª—è–µ—Ç –º–∞—Ä–∫–µ—Ä—ã (‚óè –∏ ü°°) –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
         * @param row
         */
        update_row_markers: function(row) {
            var last_stop = -1,
                previous_existing_breakpoint = 0,
                row_mixin_type_name = row.find('.nc-mixins-mixin-type-name').html(),
                editor = this,
                mixin_type = row.data('mixinType');

            row.find('.nc-mixins-width').each(function(i) {
                var cell = $(this),
                    breakpoint = cell.data('breakpoint'),
                    range_description = editor.make_range_description(previous_existing_breakpoint, breakpoint);

                cell.prop('title', row_mixin_type_name + ' ' + range_description)
                    .data('range', range_description);

                // —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –º–∞—Ä–∫–µ—Ä—ã
                cell.find('.nc-mixins-settings-marker').remove();

                // —É–¥–∞–ª—è–µ–º –∏–º–µ—é—â–∏–µ—Å—è –∫–ª–∞—Å—Å—ã nc-mixins-width--span-X
                cell.removeClass(function(j, className) {
                    return (className.match(/\bnc-mixins-width--span-\S+/g) || []).join(' ');
                });
                // –Ω–∞ —Å–∫–æ–ª—å–∫–æ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –±—É–¥—É—Ç —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è—Ç—å—Å—è –∑–∞–¥–∞–Ω–Ω—ã–µ –∑–¥–µ—Å—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã?
                if (i - last_stop > 1) {
                    cell.addClass('nc-mixins-width--span-' + (i - last_stop));
                }

                // –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —Ç–∏–ø—É
                var own_settings = editor.get_settings(editor.own_settings, mixin_type, breakpoint),
                    temporary_own_settings = editor.get_settings(editor.temporary_own_settings, mixin_type, breakpoint),
                    inherited_settings = editor.get_settings(editor.inherited_settings, mixin_type, breakpoint);

                if (own_settings || temporary_own_settings) {
                    cell.append('<div class="nc-mixins-settings-marker nc-mixins-own-settings-marker">‚óè</div>');
                } else if (inherited_settings) {
                    cell.append('<div class="nc-mixins-settings-marker nc-mixins-inherited-settings-marker">ü°°</div>');
                }

                cell.toggleClass('nc-mixins-width--with-own-settings', !!own_settings || !!temporary_own_settings);
                cell.toggleClass('nc-mixins-width--with-inherited-settings', !!inherited_settings);

                if (own_settings || temporary_own_settings || inherited_settings) {
                    last_stop = i;
                    previous_existing_breakpoint = breakpoint;
                }

            });
        },

        /**
         * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ —Å–µ–ª–µ–∫—Ç–æ—Ä
         * @returns {string}
         */
        get_current_selector: function() {
            return this.find('.nc-mixins-selector-select').val();
        },

        /**
         * –î–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è select‚Äô–∞ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º
         */
        on_selector_select_change: function() {
            var select = this.find('.nc-mixins-selector-select');
            if (select.val() === '+') {
                this.show_add_selector_dialog(); // –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –∏ –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
            } else {
                this.rebuild_table();
            }
        },

        /**
         * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
         */
        show_add_selector_dialog: function() {
            // @todo proper dialog
            var selector = prompt(this.lang.SELECTOR_ADD_PROMPT);
            if (selector && !(selector in this.selectors)) {
                this.selectors[selector] = selector;
            }
            this.update_selectors_select(selector || '');
        },

        /**
         * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ (—Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–ª–∏ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–Ω—ã—Ö)
         * –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –º–∏–∫—Å–∏–Ω–æ–≤ –∏ –±—Ä–µ–π–∫–ø–æ–∏–Ω—Ç–∞)
         * @param from
         * @param mixin_type
         * @param breakpoint
         * @returns {*}
         */
        get_settings: function(from, mixin_type, breakpoint) {
            var value;
            (value = from[this.get_current_selector()]) && // selector ‚Äî –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
            (value = value[mixin_type]) &&
            (value = value[breakpoint]);
            return value;
        },

        /**
         * –£–¥–∞–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –º–∏–∫—Å–∏–Ω–æ–≤ –∏ –±—Ä–µ–π–∫–ø–æ–∏–Ω—Ç–∞
         * @param from
         * @param mixin_type
         * @param breakpoint
         */
        remove_settings: function(from, mixin_type, breakpoint) {
            var selector = this.get_current_selector();
            if (from[selector] && from[selector][mixin_type]) {
                delete from[selector][mixin_type][breakpoint];
                if ($.isEmptyObject(from[selector][mixin_type])) {
                    delete from[selector][mixin_type];
                }
            }
        },

        /**
         * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —à–∏—Ä–∏–Ω—ã –¥–∏–∞–ø–∞–∑–æ–Ω–∞
         * @param from
         * @param to
         * @returns {string}
         */
        make_range_description: function(from, to) {
            if (Object.keys(this.breakpoints).length < 2) {
                return '';
            }
            var type = this.breakpoint_type,
                key = 'FOR_' + (type ? type.toUpperCase() + '_' : '') + 'WIDTH_';
            if (from == 0) {
                key += to == this.MAX_WIDTH ? 'ANY' : 'TO';
            } else if (to == this.MAX_WIDTH) {
                key += 'FROM';
            } else {
                key += 'RANGE';
            }
            return replace_from_to(this.lang[key] || '', from, to - 1);
        },

        /**
         * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–ª–∏ –ø—Ä—è—á–µ—Ç –±–ª–æ–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –±—Ä–µ–π–∫–ø–æ–∏–Ω—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç
         * –æ–ø—Ü–∏–∏ show_breakpoint_type_select
         */
        init_breakpoint_type_container: function() {
            var breakpoint_type_container = this.find('.nc-mixins-breakpoint-type-container');
            if (this.show_breakpoint_type_select) {
                breakpoint_type_container.show();
            } else {
                breakpoint_type_container
                    .hide()
                    .find('select').attr('name', ''); // —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏—Å—å –Ω–µ–Ω—É–∂–Ω—ã–µ/–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            }
        },

        /**
         * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ this.breakpoint_type –∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Å–µ–ª–µ–∫—Ç–∞ (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å)
         */
        set_breakpoint_type_from_select: function() {
            this.breakpoint_type = this.find('.nc-mixins-breakpoint-type-select').val() || '';
        },

        /**
         * –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏ —à–∏—Ä–∏–Ω—ã –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–µ–ª–µ–∫—Ç–∞ —Ç–∏–ø–∞ –±—Ä–µ–π–∫–ø–æ–∏–Ω—Ç–æ–≤;
         * –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏–µ 'breakpoint_type_change'
         */
        on_breakpoint_type_select_change: function() {
            var editor = this;
            editor.set_breakpoint_type_from_select();
            editor.find('.nc-mixins-mixin-row').each(function() {
                var row = $(this),
                    active_cell = row.find('.nc-mixins-settings-marker.nc--active').closest('.nc-mixins-width').index();
                // –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –º–∞—Ä–∫–µ—Ä–æ–≤
                editor.update_row_markers(row);
                // –≤—ã–±–æ—Ä —Ç–æ–≥–æ –∂–µ –º–∞—Ä–∫–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –≤—ã–±—Ä–∞–Ω –¥–æ —ç—Ç–æ–≥–æ
                if (active_cell >= 0) {
                    row.find('.nc-mixins-width').eq(active_cell)
                        .find('.nc-mixins-settings-marker, .nc-mixins-add-setting').click();
                }
            });
            this.container.trigger(nc_mixin_settings_editor.breakpoint_type_change_event, [{ editor: this }]);
        },

        /**
         * –í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è select‚Äô–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ—Å–µ—Ç–∞
         */
        on_preset_select_change: function() {
            if (this.find('.nc-mixins-preset-select').val() === '+') {
                this.open_preset_edit_dialog();
            } else {
                this.apply_preset_settings();
            }
        },

        /**
         * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ—Å–µ—Ç–∞
         */
        open_preset_edit_dialog: function() {
            var preset_select_option = this.get_selected_preset_option(),
                preset_id = preset_select_option.data('id'),
                create_new_preset = preset_select_option.val() === '+',
                options = {
                    component_template_id: this.component_template_id,
                    'data[Scope]': this.scope
                };

            if (preset_id === '0') {
                return;
            }

            if (create_new_preset) {
                options['data[Mixin_Settings]'] = this.find('.nc-mixins-json').val();
            } else {
                options['mixin_preset_id'] = preset_id;
            }

            var opener_editor = this;
            nc.load_dialog(this.container.data('preset-edit-dialog-url'), options, 'POST')
              .set_option('on_submit_response', function(response) {
                  // this = –¥–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ—Å–µ—Ç–∞
                  // response = ID –ø—Ä–µ—Å–µ—Ç–∞
                  var dialog = this, // PhpStorm –±–µ–∑ —ç—Ç–æ–≥–æ ¬´–¥—É–º–∞–µ—Ç¬ª, —á—Ç–æ this –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ
                      preset_id = parseInt(response, 10),
                      preset_name = dialog.find('input[name="data[Mixin_Preset_Name]"]').val(),
                      preset_settings = dialog.find('.nc-mixins-json').val(),
                      set_as_default = dialog.find(':checkbox[name="set_as_default"]').is(':checked');
                  if (preset_id) {
                      opener_editor.update_preset(preset_id, preset_name, preset_settings, set_as_default);
                  }
                  dialog.destroy();
              });

            if (create_new_preset) {
                this.find('.nc-mixins-preset-select').val('-1').change();
            }
        },

        /**
         * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ—Å–µ—Ç–∞
         */
        open_preset_delete_dialog: function() {
            var options = {
                    mixin_preset_id: this.get_selected_preset_option().data('id')
                };

            var opener_editor = this;
            nc.load_dialog(this.container.data('preset-delete-dialog-url'), options, 'POST')
              .set_option('on_submit_response', function(response) {
                  // this = –¥–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ—Å–µ—Ç–∞
                  // response = ID –ø—Ä–µ—Å–µ—Ç–∞
                  var preset_id = parseInt(response, 10);
                  if (preset_id) {
                      opener_editor.delete_preset(preset_id);
                  }
                  this.destroy();
              });
        },

        /**
         * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–ª–æ–∫ —Å –≤—ã–±–æ—Ä–æ–º –ø—Ä–µ—Å–µ—Ç–∞, –ª–∏–±–æ –ø—Ä—è—á–µ—Ç –µ–≥–æ,
         * –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–ø—Ü–∏–π show_preset_select –∏
         */
        init_preset_container: function() {
            var preset_container = this.find('.nc-mixins-preset-container');
            if (this.show_preset_select) {
                this.init_preset_select(preset_container); // –∑–∞–ø–æ–ª–Ω—è–µ–º select —Å –ø—Ä–µ—Å–µ—Ç–∞–º–∏ –∏–∑ options.mixin_presets
                preset_container.show();
            } else {
                preset_container
                    .hide()
                    .find('select').attr('name', ''); // —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏—Å—å –Ω–µ–Ω—É–∂–Ω—ã–µ/–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            }
        },

        /**
         * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–ø—Ü–∏–∏ –≤ —Å–µ–ª–µ–∫—Ç–µ –ø—Ä–µ—Å–µ—Ç–æ–≤ –∏–∑ this.mixin_presets
         */
        init_preset_select: function(preset_container) {
            var select = preset_container.find('.nc-mixins-preset-select');
            select.find('option').remove();
            if (this.mixin_presets.length) {
                $.each(this.mixin_presets, function(i, preset) {
                   $('<option>')
                       .attr({
                           value: preset.value,
                           selected: preset.selected,
                           'data-id': preset.id, // –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç value –¥–ª—è –æ–ø—Ü–∏–∏ ¬´–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ—Å–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é¬ª
                           'data-settings': preset.settings // –Ω–µ —á–µ—Ä–µ–∑ data(), —Ç. –∫. —ç—Ç–æ JSON-—Å—Ç—Ä–æ–∫–∞
                       })
                       .html(preset.name)
                       .appendTo(select);
                });
            } else {
                select.append('<option>');
            }
            select.append('<option value="+">' + this.lang.PRESET_CREATE);
        },

        /**
         * –û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–µ—Å–µ—Ç–∞ (–ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –¥–∏–∞–ª–æ–≥–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ—Å–µ—Ç–∞)
         * @param preset_id
         * @param preset_name
         * @param preset_settings
         * @param set_as_default
         */
        update_preset: function(preset_id, preset_name, preset_settings, set_as_default) {
            var select = this.find('.nc-mixins-preset-select'),
                options_to_update = select.find('option[data-id="' + preset_id + '"]'),
                default_option = select.find('option[value="-1"]'),
                was_default = default_option.data('id') == preset_id;

            if (!options_to_update.length) {
                options_to_update = $('<option>').val(preset_id).insertBefore(select.find('option:last'));
                select.val(set_as_default ? '-1' : preset_id);
            }

            if (set_as_default) {
                options_to_update = options_to_update.add(default_option);
            }

            options_to_update
                .html(preset_name)
                .attr({'data-id': preset_id, 'data-settings': preset_settings})  // –≤–∞–∂–Ω–æ, —á—Ç–æ–±—ã –±—ã–ª –∞—Ç—Ä–∏–±—É—Ç data-id –≤ —Ä–∞–∑–º–µ—Ç–∫–µ
                .data({id: preset_id, 'settings': JSON.parse(preset_settings)}); // preset_settings ‚Äî —ç—Ç–æ JSON-—Å—Ç—Ä–æ–∫–∞

            if (set_as_default) {
                default_option.html(this.lang.PRESET_DEFAULT.replace('%s', preset_name));
            } else if (was_default) {
                this.remove_default_preset(preset_id);
            }

            select.change();
        },

        /**
         * –í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ—Å–µ—Ç–∞
         * @param preset_id
         */
        delete_preset: function(preset_id) {
            var select = this.find('.nc-mixins-preset-select');

            select.find('option[value="' + preset_id + '"]').remove();
            this.remove_default_preset(preset_id);

            select.val('-1').change();
        },

        /**
         * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø—Ä–µ—Å–µ—Ç –≤ —Å–µ–ª–µ–∫—Ç–µ –ø—Ä–µ—Å–µ—Ç–æ–≤ –≤ ¬´–Ω–µ—Ç¬ª
         * @param preset_id
         */
        remove_default_preset: function(preset_id) {
            this.find('.nc-mixins-preset-select')
                .find('option[value="-1"][data-id="' + preset_id + '"]')
                .attr({'data-id': '0', 'data-settings': ''})
                .data({id: 0, 'settings': {}})
                .html(this.lang.PRESET_DEFAULT_NONE);
        },

        /**
         * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤ select‚Äô–µ –ø—Ä–µ—Å–µ—Ç–æ–≤ option
         * @returns {*|jQuery}
         */
        get_selected_preset_option: function() {
            return this.find('.nc-mixins-preset-select option:selected');
        },

        /**
         * –û–±–Ω–æ–≤–ª—è–µ—Ç —Ä–µ–¥–∞–∫—Ç–æ—Ä –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ—Å–µ—Ç–∞
         */
        apply_preset_settings: function() {
            if (this.show_preset_select) {
                var selected_preset_option = this.get_selected_preset_option();
                this.set_inherited_settings(selected_preset_option.data('settings') || {});
                this.rebuild_table();
                this.find('.nc-mixins-preset-actions').toggle(!!selected_preset_option.data('id'));
                this.update_mixin_json();
            }
        },

        /**
         * –ü—Ä—è—á–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–∏–ø–∞ –º–∏–∫—Å–∏–Ω–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –¥—Ä—É–≥–æ–≥–æ —Ç–∏–ø–∞
         * –º–∏–∫—Å–∏–Ω–æ–≤)
         */
        close_opened_mixin_settings: function() {
            var editor = this;
            this.find('.nc-mixins-settings-cell.nc--active').removeClass('nc--active').each(function() {
                // –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª –Ω–æ–≤—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω, –Ω–æ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –Ω—ë–º –Ω–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ ‚Äî —É–¥–∞–ª—è–µ–º –µ–≥–æ
                var previous_settings_cell = $(this);
                if (previous_settings_cell.is('.nc-mixins-settings-cell--temporary')) {
                    var previous_settings_row = previous_settings_cell.closest('tr');
                    editor.remove_settings(editor.temporary_own_settings, previous_settings_row.data('mixinType'), previous_settings_cell.data('breakpoint'));
                    editor.update_row_markers(previous_settings_row);
                }
            });
        },

        /**
         * –†–∞—Å–∫—Ä—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ —Ç–∏–ø–∞ –º–∏–∫—Å–∏–Ω–∞
         * @param click_event
         */
        show_mixin_settings: function(click_event) {
            var button = $(click_event.target),
                range_cell = button.closest('td'),
                row = range_cell.closest('tr'),
                settings_cell = row.find('.nc-mixins-settings-cell'),
                mixin_type = row.data('mixinType'),
                breakpoint = range_cell.data('breakpoint'),
                mixin_select = settings_cell.find('.nc-mixins-mixin-select');

            // –∫–ª–∏–∫ –Ω–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
            if (button.is('.nc--active')) {
                return;
            }

            // –µ—Å–ª–∏ –±—ã–ª–∞ –æ—Ç–∫—Ä—ã—Ç–∞ –¥—Ä—É–≥–∞—è —è—á–µ–π–∫–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ ‚Äî –ø—Ä—è—á–µ–º –µ—ë
            this.close_opened_mixin_settings();

            // —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –¥–µ–π—Å—Ç–≤—É—é—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            settings_cell.find('.nc-mixins-mixin-range-description').html(range_cell.data('range'));
            settings_cell.data('breakpoint', breakpoint);

            // —Ä–∞—Å–∫—Ä—ã–≤–∞–µ–º —è—á–µ–π–∫—É —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            settings_cell.addClass('nc--active');

            // —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            var settings = this.get_mixin_settings_values(mixin_type, breakpoint),
                mixin_keyword = settings.mixin,
                settings_container = settings_cell.find('.nc-mixins-mixin-settings[data-mixin-keyword="' + mixin_keyword + '"]');
            mixin_select.val(mixin_keyword || '');
            this.on_mixin_select_change(mixin_select, true); // –Ω–µ mixin_select.change() ‚Äî –ø–µ—Ä–µ–¥–∞—ë–º –¥–æ–ø. –ø–∞—Ä–∞–º–µ—Ç—Ä
            this.set_mixin_input_values(settings_container, settings, true);

            // –ø–æ–º–µ—á–∞–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–æ–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ (–µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–º–µ–Ω—è–µ—Ç—Å—è, —É–¥–∞–ª–∏–º –µ–≥–æ –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞)
            settings_cell.toggleClass('nc-mixins-settings-cell--temporary', !button.is('.nc-mixins-own-settings-marker'));

            // –µ—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ, –æ–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã (–¥–æ–±–∞–≤–∏—Ç—Å—è –º–∞—Ä–∫–µ—Ä —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫)
            if (button.is('.nc-mixins-add-setting')) {
                this.update_current_mixin_settings(true);
            }

            // —É–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π —è—á–µ–π–∫–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —à–∏—Ä–∏–Ω—ã
            this.find('.nc-mixins-settings-marker').removeClass('nc--active');
            // –ø–æ–¥—Å–≤–µ—Ç–∫–∞ —è—á–µ–π–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            range_cell.find('.nc-mixins-settings-marker').addClass('nc--active');
        },

        /**
         * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–µ–π –≤ –±–ª–æ–∫–µ —Ç–∏–ø–∞ –º–∏–∫—Å–∏–Ω–∞ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
         * @param mixin_settings_container
         * @param settings
         * @param trigger_events
         */
        set_mixin_input_values: function(mixin_settings_container, settings, trigger_events) {
            mixin_settings_container.find('.nc-mixins-mixin-settings-rows').children().remove();
            // –¥–ª—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –≤—Å–µ—Ö —Å–≤–æ–π—Å—Ç–≤ ¬´—Å –∑–∞–º–∫–æ–º¬ª –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ lock_sides –¥–æ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            for (var key in settings) {
                if (/^settings\.(.+\.)?lock_sides$/.test(key)) {
                    var lock = {};
                    lock[key] = settings[key];
                    settings = $.extend(lock, settings);
                }
            }
            for (var key in settings) {
                var multiple_settings_index = (key.match(/\.(\d+)\./) || [])[1],
                    input_container = (multiple_settings_index !== undefined) // –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏?
                        ? this.get_mixin_multiple_settings_container(mixin_settings_container, multiple_settings_index)
                        : mixin_settings_container,
                    // –≤ —Ñ–æ—Ä–º–µ –≤—Å–µ –∏–Ω–ø—É—Ç—ã –≤–º–µ—Å—Ç–æ –ø–æ—Ä—è–¥–∫–æ–≤—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –∏–º–µ—é—Ç '#' –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏:
                    input_name = 'mixin.' + key.replace('.' + multiple_settings_index + '.', '.#.'),
                    input = input_container.find('[name="' + input_name + '"]');

                if (input.is(':checkbox')) {
                    input.prop('checked', !!settings[key]);
                } else if (input.is(':radio')) {
                    input.filter('[value="' + settings[key].replace('"', '\\"') + '"]').prop('checked', true);
                } else if (input.is('[data-color-input]')) {
                    input.attr('data-sync-color', settings[key]);
                    this.set_color_input(input, settings[key]);
                } else {
                    input.val(settings[key]);
                }
                if (trigger_events) {
                    input.change();
                }
            }
            mixin_settings_container.trigger(nc_mixin_settings_editor.mixin_settings_set_values_event, [{ editor: this }]);
        },

        /**
         * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–ª–æ–∫ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ (div.nc-mixins-mixin-settings-row) –ø–æ –Ω–æ–º–µ—Ä—É
         * (—Å–æ–∑–¥–∞—ë—Ç –µ–≥–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
         * @param mixin_settings_container
         * @param {Number|String} index
         * @returns {*}
         */
        get_mixin_multiple_settings_container: function(mixin_settings_container, index) {
            index = parseInt(index, 10);
            var rows_container = mixin_settings_container.find('.nc-mixins-mixin-settings-rows'),
                rows = rows_container.find('.nc-mixins-mixin-settings-row'),
                existing_number_of_rows = rows.length,
                template = mixin_settings_container.find('.nc-mixins-mixin-settings-row-template');

            if (existing_number_of_rows > index) { // —É–∂–µ –µ—Å—Ç—å –Ω—É–∂–Ω—ã–π –±–ª–æ–∫
                return rows.eq(index);
            }

            if (!rows_container.length || !template.length) { // –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –Ω—É–∂–Ω—ã—Ö –±–ª–æ–∫–æ–≤ –≤ —Ä–∞–∑–º–µ—Ç–∫–µ, –º—ã —Ç—É—Ç –±–µ—Å—Å–∏–ª—å–Ω—ã
                return mixin_settings_container;
            }

            var last = mixin_settings_container;
            while (existing_number_of_rows++ < index + 1) {
                last = template.clone().removeClass('nc-mixins-mixin-settings-row-template').appendTo(rows_container);

                // –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª–µ–π –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞
                this.init_color_inputs(last.find('[data-color-input]'));

                // –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª–µ–π –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞
                this.init_uploader(last.find('[data-uploader]'));
            }

            // –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
            if (template.find('.nc-mixins-mixin-settings-row-move').length > 0) {
                rows_container.sortable({
                    handle: '.nc-mixins-mixin-settings-row-move',
                    containment: 'parent',
                    update: $.proxy(this, 'update_current_mixin_settings')
                });
            }

            return last;
        },

        /**
         * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
         * @param event
         */
        on_mixin_multiple_settings_add_button_click: function(event) {
            var button = $(event.target),
                mixin_settings_container = button.closest('.nc-mixins-mixin-settings'),
                new_index = mixin_settings_container.find('.nc-mixins-mixin-settings-rows .nc-mixins-mixin-settings-row').length;

            var new_row = this.get_mixin_multiple_settings_container(mixin_settings_container, new_index);
            mixin_settings_container.trigger(
                nc_mixin_settings_editor.mixin_settings_new_row_event,
                [{ editor: this, row: new_row }]
            );

            this.update_current_mixin_settings();
            return false;
        },

        /**
         * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
         * @param event
         */
        on_mixin_multiple_settings_remove_button_click: function(event) {
            $(event.target).closest('.nc-mixins-mixin-settings-row').remove();
            this.update_current_mixin_settings();
            return false;
        },

        /**
         * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–µ–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –º–∏–∫—Å–∏–Ω–æ–≤ –∏ –±—Ä–µ–π–∫–ø–æ–∏–Ω—Ç–∞
         * @param mixin_type
         * @param breakpoint
         * @returns {*}
         */
        get_mixin_settings_values: function(mixin_type, breakpoint) {
            var settings =
                this.get_settings(this.own_settings, mixin_type, breakpoint) ||
                this.get_settings(this.inherited_settings, mixin_type, breakpoint);

            // –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ—Ç ‚Äî –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –±–µ—Ä—ë–º –∑–Ω–∞—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –±—Ä–µ–π–∫–ø–æ–∏–Ω—Ç–∞
            if (!settings) {
                var all_breakpoints = Object.keys(this.breakpoints).map(Number),
                    breakpoint_index = all_breakpoints.indexOf(breakpoint);
                if (breakpoint_index < all_breakpoints.length - 1) {
                    settings = this.get_mixin_settings_values(mixin_type, all_breakpoints[breakpoint_index + 1]);
                }
            }

            return flatten(settings || {});
        },

        /**
         * –í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –º–∏–∫—Å–∏–Ω–∞
         * @param mixin_select
         * @param is_initializing_mixin_settings_container
         */
        on_mixin_select_change: function(mixin_select, is_initializing_mixin_settings_container) {
            var settings_cell = mixin_select.closest('.nc-mixins-settings-cell');
            settings_cell.find('.nc-mixins-mixin-settings')
                .hide()
                .filter('[data-mixin-keyword="' + mixin_select.val() + '"]')
                .show()
                .trigger(nc_mixin_settings_editor.mixin_settings_set_values_event, [{ editor: this }]);

            if (!is_initializing_mixin_settings_container) {
                settings_cell.removeClass('nc-mixins-settings-cell--temporary');
                this.update_current_mixin_settings();
            }
        },

        /**
         * –í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–∏–∫—Å–∏–Ω–∞
         * @param is_new_setting
         */
        update_current_mixin_settings: function(is_new_setting) {
            var editor = this;

            editor.find('.nc-mixins-settings-cell.nc--active').each(function() {
                var active_cell = $(this),
                    selector = editor.get_current_selector(),
                    row = active_cell.closest('.nc-mixins-mixin-row'),
                    mixin_type = row.data('mixinType'),
                    mixin_keyword = active_cell.find('.nc-mixins-mixin-select').val(),
                    breakpoint = active_cell.data('breakpoint'),
                    update_markers = false,
                    // –¥–ª—è –Ω–æ–≤—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –¥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—á–∏—Ç–∞—é—Ç—Å—è ¬´–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏¬ª (–Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è)
                    // (–ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ–±—ã—Ç–∏–∏)
                    settings_type = 'own_settings';

                if (is_new_setting === true) { // –ø–µ—Ä–≤—ã–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º —Ñ—É–Ω–∫—Ü–∏–∏ [is_new_setting] —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç –±—ã—Ç—å eventData
                    update_markers = true;
                    settings_type = 'temporary_own_settings';
                } else if (active_cell.hasClass('nc-mixins-settings-cell--temporary')) { // –ø—Ä–∏ –ª—é–±–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–µ—Ä–µ—Å—Ç–∞—ë–º —Å—á–∏—Ç–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ¬´–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏¬ª
                    active_cell.removeClass('nc-mixins-settings-cell--temporary');
                    update_markers = true;
                }

                set_multilevel_object_value(editor[settings_type], [selector, mixin_type, breakpoint], { mixin: mixin_keyword });

                active_cell.find('.nc-mixins-mixin-settings[data-mixin-keyword="' + mixin_keyword + '"]').each(function() {
                    var settings = editor.get_mixin_input_values($(this));
                    $.extend(editor[settings_type][selector][mixin_type][breakpoint], unflatten(settings));
                });

                if (update_markers) {
                    // –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ (ü°° ‚Üí ‚óè)
                    editor.update_row_markers(row);
                    row.find('.nc-mixins-width[data-breakpoint="' + breakpoint + '"] .nc-mixins-settings-marker')
                        .addClass('nc--active');
                }
            });

            if (is_new_setting !== true) {
                this.update_mixin_json();
            }
        },

        /**
         * –û–±–Ω–æ–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è —Å–∫—Ä—ã—Ç–æ–≥–æ –ø–æ–ª—è —Å JSON —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –≤—Å–µ—Ö –º–∏–∫—Å–∏–Ω–æ–≤
         */
        update_mixin_json: function() {
            if (!this.is_initialized) { // —á—Ç–æ–±—ã –Ω–µ –æ–±–Ω–æ–≤–ª—è—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                return;
            }

            var saved_settings = $.extend({}, this.own_settings);
            for (var selector in saved_settings) {
                if ($.isEmptyObject(saved_settings[selector])) {
                    delete saved_settings[selector];
                } else {
                    saved_settings[selector] = this.sort_mixins(saved_settings[selector]);
                }
            }
            this.find('.nc-mixins-json').val(JSON.stringify(saved_settings));
        },

        /**
         * –í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è —Ç–∏–ø–∞ –º–∏–∫—Å–∏–Ω–∞
         * @param event
         */
        on_remove_settings_button_click: function(event) {
            var remove_button = $(event.target),
                settings_cell = remove_button.closest('.nc-mixins-settings-cell'),
                row = settings_cell.closest('tr'),
                mixin_type = row.data('mixinType'),
                breakpoint = settings_cell.data('breakpoint');
            this.remove_settings(this.temporary_own_settings, mixin_type, breakpoint);
            this.remove_settings(this.own_settings, mixin_type, breakpoint);
            this.update_row_markers(row);
            this.close_opened_mixin_settings();
            this.update_mixin_json();
        },

        /**
         * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫—É –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —Å—Ç–æ—Ä–æ–Ω–∞–º top/left/right/bottom.
         * –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—É–¥—É—Ç –º–µ–Ω—è—Ç—å—Å—è –≤ –±–ª–æ–∫–µ .nc-mixins-mixin-settings-lock-sides (–∏–ª–∏, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, —Ç–æ
         * –≤–æ –≤—Å—ë–º –±–ª–æ–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–∏–∫—Å–∏–Ω–∞), –≤ –∫–æ—Ç–æ—Ä–æ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞.
         * @param lock_button
         */
        init_lock_sides_button: function(lock_button) {
            var container = lock_button.closest('.nc-mixins-mixin-settings-lock-sides, .nc-mixins-mixin-settings'),
                lock_input = container.find(':hidden[name^="mixin.settings"][name$=".lock_sides"]'),
                inputs = container.find(':input');

            lock_input.change(function() {
                lock_button
                    .removeClass('nc-icon-lock nc-icon-unlock')
                    .addClass(lock_input.val() ? 'nc-icon-lock' : 'nc-icon-unlock');
            }).change();

            lock_button.click(function() {
                lock_input.val(lock_input.val() ? '' : '1').change();
                inputs.filter('[name*="top"]').change();
            });

            var trbl = '(top|right|bottom|left)',
                trbl_regexp = new RegExp(trbl);

            inputs.on('change input blur', function() {
                if (lock_input.val() === '1') {
                    var attributes = this.attributes,
                        value = $(this).val(),
                        input_name_regexp = new RegExp(this.name.replace(/\./g, '\\.').replace(trbl_regexp, trbl)),
                        inputs_to_sync = inputs.filter(function() { return (this.name && this.name.match(input_name_regexp)); });
                    inputs_to_sync.val(value);
                    $.each(attributes, function(index, attribute){
                        if (!attribute.name.indexOf('data-sync-')) {
                            inputs_to_sync.attr(attribute.name, attribute.value);
                        }
                    });
                    inputs.filter('.minicolors-input').each(function() {
                        var input = $(this);
                        input.minicolors('value', input.val());
                    });
                }
            });
        },

        /**
         * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç <options> —Å —à—Ä–∏—Ñ—Ç–∞–º–∏
         * @returns {String}
         */
        get_font_options_html: function() {
            var editor = this;
            if (!font_select_options_cache) {
                $.each(editor.fonts, function(i, font) {
                    font_select_options_cache += "<option name='" + font.name +
                        "' data-asset='" + font.asset +
                        "' data-fallback='" + font.fallback +
                        "' style='font-family:&quot;" + font.name + "&quot;'>" +
                        font.name + "</option>";
                });
            }
            return font_select_options_cache;
        },

        /**
         * –î–æ–±–∞–≤–ª—è–µ—Ç –æ–ø—Ü–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —à—Ä–∏—Ñ—Ç–æ–≤ (—Å–ø–∏—Å–æ–∫ —à—Ä–∏—Ñ—Ç–æ–≤ –ø–µ—Ä–µ–¥–∞–Ω –≤ data-fonts
         * –≤ —à–∞–±–ª–æ–Ω–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞)
         * @param select
         */
        init_font_select: function(select) {
            select.html(select.html() + this.get_font_options_html());
        },

        /**
         * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—è—Ö
         * @param inputs
         */
        init_color_inputs: function(inputs) {
            var infoblock_id = this.infoblock_id ? this.infoblock_id : 0;
            var block = $('.tpl-block-' + infoblock_id + ', .tpl-container-' + infoblock_id);
            var minicolors_options = {
                format: 'rgb',
                keywords: 'transparent',
                opacity: true,
                swatches: [],
                theme: 'netcat'
            };
            var palette = [
                '--tpl-color-foreground-main',
                '--tpl-color-foreground-accent',
                '--tpl-color-brand',
                '--tpl-color-background-accent',
                '--tpl-color-background-main'
            ];
            var calculated_colors = {};

            if (infoblock_id > 0 && block.length > 0) {
                $.each(palette, function (index, color) {
                    var palette_color = getComputedStyle(block[0]).getPropertyValue(color);
                    if (palette_color) {
                        minicolors_options.swatches.push({
                            name: 'var(' + color + ')',
                            color: palette_color.trim()
                        });
                        calculated_colors['var(' + color + ')'] = palette_color.trim();
                    }
                });

                if (minicolors_options.swatches.length > 0) {
                    inputs.each(function () {
                        var input = $(this);
                        if (calculated_colors.hasOwnProperty(input.attr('data-sync-color'))) {
                            input.val(calculated_colors[input.attr('data-sync-color')]);
                        }
                    });
                }
            }

            this.calculated_colors = calculated_colors;

            inputs
                .minicolors('destroy')
                .minicolors(minicolors_options);

            if (typeof inputs.data('nc-swatches') !== "undefined") {
                $('.minicolors-swatch-color').on('click', function () {
                    var swatch = $(this);

                    if (!swatch.attr('title')) {
                        return true;
                    }

                    var input = swatch.closest('.minicolors-panel').siblings('.minicolors-input');
                    input.attr('data-sync-color', swatch.attr('title'));
                });

                $('.minicolors-panel *').on('click', function (event) {
                    var target = $(event.target);
                    if (target.is('.minicolors-swatches') || target.closest('.minicolors-swatches').length > 0) {
                        return true;
                    }

                    var input = $(this).closest('.minicolors-panel').siblings('.minicolors-input');
                    input.attr('data-sync-color', '');
                });
            }
        },

        set_color_input: function(input, value) {
            if (value.indexOf('var') === 0 && this.calculated_colors.hasOwnProperty(value)) {
                input.minicolors('value', { color: this.calculated_colors[value] });
            } else {
                input.minicolors('value', { color: value });
            }
        },

        /**
         * –î–æ–±–∞–≤–ª—è–µ—Ç –≤ HEAD CSS-—Ñ–∞–π–ª—ã —à—Ä–∏—Ñ—Ç–æ–≤, —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≤ data-fonts
         */
        load_fonts: function() {
            var head = $('head');
            this.fonts = this.container.data('fonts');
            $.each(this.fonts, function(i, font_data) {
                $.each(font_data.css, function(i, file) {
                    if (!$('link[href="' + file + '"]', head).length) {
                        head.append($('<link>', { rel: 'stylesheet', href: file }));
                    }
                });
            });
        },

        /**
         * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç Element (–Ω–µ jQuery-–∫–æ–ª–ª–µ–∫—Ü–∏—é!), –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∏–Ω—Ñ–æ–±–ª–æ–∫
         * (–µ—Å–ª–∏ –∏–Ω—Ñ–æ–±–ª–æ–∫ –±—ã–ª —É–∫–∞–∑–∞–Ω –≤ options.infoblock_id; –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî —Ç–æ –≤–µ—Ä–Ω—ë—Ç null)
         * –ú–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ —Ñ–æ—Ä–º–∞—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–∏–∫—Å–∏–Ω–æ–≤.
         * @returns {Element|null}
         */
        get_infoblock_element: function() {
            var id = this.infoblock_id;
            return id ? document.querySelector('.tpl-block-' + id + ', .tpl-container-' + id) : null;
        },

        /**
         * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑—á–∏–∫ —Ñ–∞–π–ª–æ–≤ –≤ –ø–æ–ª–µ —Ñ–æ–Ω–∞ (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –≤–∏–¥–µ–æ, –ø—Ä–∞–ª–ª–∞–∫—Å)
         * @param uploaders
         */
        init_uploader: function(uploaders) {
            var _this = this;

            uploaders.each(function() {
                var
                    uploader = $nc(this),
                    allowed_types = uploader.data('uploader-allowed'),
                    ext_filter = uploader.data('uploader-ext'),
                    url_field = uploader.find('input[type="url"]'),
                    file_field = uploader.find('input[type="file"]'),
                    btn = uploader.find('.js-mixin-upload');

                if (ext_filter) {
                    ext_filter = ext_filter.split(/\s*,\s*/);
                }

                btn.on('click', function() {
                    var
                        mixin_keyword = uploader.closest('.nc-mixins-mixin-settings').data('mixin-keyword'),
                        max_file_size = uploader.closest('.nc-mixins-editor').data('upload-max-filesize'),
                        dialog = nc.ui.modal_dialog.get_current_dialog();

                    uploader.dmUploader({
                        url: NETCAT_PATH + 'action.php?ctrl=admin.mixin_file&action=save&isNaked=1&admin_modal=1',
                        maxFileSize: max_file_size,
                        multiple: false,
                        allowedTypes: allowed_types,
                        extFilter: ext_filter,
                        dataType: 'json',
                        extraData: {
                            scope: _this.scope,
                            infoblock_id: _this.infoblock_id,
                            mixin_keyword: mixin_keyword
                        },
                        onDragEnter: function() {
                            this.addClass('active');
                        },
                        onDragLeave: function() {
                            this.removeClass('active');
                        },
                        onInit: function() {
                            file_field.trigger('click');
                        },
                        onComplete: function() {
                            uploader.dmUploader('destroy');
                        },
                        onBeforeUpload: function(id) {
                            url_field.addClass('nc--loading');
                        },
                        onUploadSuccess: function(id, data) {
                            url_field.removeClass('nc--loading').val(data.url).trigger('change');
                        },
                        onUploadError: function(id, xhr, status, message) {
                            uploader.dmUploader('destroy');
                        },
                        onFallbackMode: function() {
                            try {
                                dialog.show_error('–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–æ–≤');
                            } catch(e) {
                                alert('–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–æ–≤');
                            }
                            uploader.dmUploader('destroy');
                        },
                        onFileSizeError: function(file) {
                            try {
                                dialog.show_error('–§–∞–π–ª \'' + file.name + '\' —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π');
                            } catch(e) {
                                alert('–§–∞–π–ª \'' + file.name + '\' —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π');
                            }
                            uploader.dmUploader('destroy');
                        },
                        onFileTypeError: function(file) {
                            try {
                                dialog.show_error('–§–∞–π–ª \'' + file.name + '\' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–π–ª–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
                            } catch(e) {
                                alert('–§–∞–π–ª \'' + file.name + '\' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–π–ª–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
                            }
                            uploader.dmUploader('destroy');
                        },
                        onFileExtError: function(file) {
                            try {
                                dialog.show_error('–§–∞–π–ª \'' + file.name + '\' –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç');
                            } catch(e) {
                                alert('–§–∞–π–ª \'' + file.name + '\' –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç');
                            }
                            uploader.dmUploader('destroy');
                        }
                    });
                })
            })
        },
    };

})($nc);
